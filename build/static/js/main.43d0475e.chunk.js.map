{"version":3,"sources":["components/Loader/PreLoader.tsx","components/header/Header.tsx","components/Filds/fildItem/select/Selecting.tsx","components/Filds/FildsData.ts","components/Filds/fildItem/FildItem.tsx","components/Footer/Footer.tsx","components/Filds/Filds.tsx","content/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loader","className","Header","props","metod","setMetod","Group","onChange","e","target","value","Button","Option","Select","Selecting","setValue","useState","measure","option","valueSelected","setValueSelected","useEffect","id","selectMeasure","defaultValue","placeholder","Number","addonAfter","type","min","allowClear","staticFilds","label","disabled","handleFilds","optionMap","Map","FildItem","get","setValues","Footer","key","onClick","message","success","content","top","size","info","console","log","fields","Filds","values","getValues","find","item","newArray","map","push","renderList","list","Content","App","loaded","setLoaded","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+PAEaA,G,YAAS,WACpB,OACE,yBAAKC,UAAU,UACb,kD,iBCEOC,G,MAAS,SAACC,GAAqB,IACjCC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,SACd,OACI,yBAAKJ,UAAW,UACZ,6CACA,kBAAC,IAAMK,MAAP,CAAaC,SAAU,SAACC,GAAD,OAAKH,EAASG,EAAEC,OAAOC,QAAQA,MAAON,GACzD,kBAAC,IAAMO,OAAP,CAAcD,MAAM,OAApB,OACA,kBAAC,IAAMC,OAAP,CAAcD,MAAM,MAApB,U,qDCXTE,EAAUC,IAAVD,OAUME,EAAY,SAACX,GACEA,EAAnBY,SAAmBZ,EAATO,MADiC,IAAD,EAEPM,mBAAoB,CAC5DC,QAAS,EACTC,OAAQ,IAJuC,mBAE1CC,EAF0C,KAE3BC,EAF2B,KAMjDC,qBAAU,WACRlB,EAAMY,SAAN,eAAmBI,EAAnB,CAAkCG,GAAInB,EAAMmB,QAC3C,CAACH,IACJ,IAAMI,EACJ,kBAAC,IAAD,CACEC,aAAcL,EAAcD,OAC5BjB,UAAU,eACVM,SAAU,SAACC,GAAD,OAAOY,EAAiB,eAAID,EAAL,CAAoBD,OAAQV,OAE7D,kBAACI,EAAD,CAAQF,MAAO,GAAf,KACA,kBAACE,EAAD,CAAQF,MAAO,KAAf,MACA,kBAACE,EAAD,CAAQF,MAAO,KAAf,OAGJ,OACE,kBAAC,IAAD,CACET,UAAU,eACVwB,YAAa,mBACblB,SAAU,SAACC,GAAD,OACRY,EAAiB,eAAID,EAAL,CAAoBF,QAASS,OAAOlB,EAAEC,OAAOC,WAE/DiB,WAAYJ,EACZK,KAAK,SACLC,IAAK,EACLC,YAAY,KCzCLC,EAA0B,CACrC,CACEC,MAAO,oBACPtB,MAAO,CAACO,QAAS,EAAGC,OAAQ,GAC5BI,GAAI,EACJW,UAAU,GAEZ,CACED,MAAO,oBACPtB,MAAO,CAACO,QAAS,EAAGC,OAAQ,KAC5BI,GAAI,EACJW,UAAU,GAEZ,CACED,MAAO,oBACPtB,MAAO,CAACO,QAAS,EAAGC,OAAQ,KAC5BI,GAAI,EACJW,UAAU,GAEZ,CACED,MAAO,oBACPtB,MAAO,CAACO,QAAS,EAAGC,OAAQ,GAC5BI,GAAI,EACJW,UAAU,GAEZ,CACED,MAAO,oBACPtB,MAAO,CAACO,QAAS,EAAGC,OAAQ,GAC5BI,GAAI,EACJW,UAAU,IAGDC,EAA0B,CACrC,CAACF,MAAO,cAAetB,MAAO,CAACO,QAAS,EAAGC,OAAQ,GAAII,GAAI,GAC3D,CAACU,MAAO,cAAetB,MAAO,CAACO,QAAS,EAAGC,OAAQ,KAAOI,GAAI,GAC9D,CAACU,MAAO,cAAetB,MAAO,CAACO,QAAS,EAAGC,OAAQ,KAAOI,GAAI,GAC9D,CAACU,MAAO,cAAetB,MAAO,CAACO,QAAS,EAAGC,OAAQ,GAAII,GAAI,GAC3D,CAACU,MAAO,cAAetB,MAAO,CAACO,QAAS,EAAGC,OAAQ,GAAII,GAAI,IAEhDa,EAAY,IAAIC,IAAI,CAC/B,CAAC,EAAG,KACJ,CAAC,IAAM,MACP,CAAC,IAAS,QC1BCC,EAAW,SAAClC,GAAqB,IACrC6B,EAA8B7B,EAA9B6B,MAAOtB,EAAuBP,EAAvBO,MAAOY,EAAgBnB,EAAhBmB,GAAIW,EAAY9B,EAAZ8B,SACzB,OACE,yBAAKhC,UAAU,YACb,4BAAK+B,GACJC,EACC,kBAAC,IAAD,CACET,aAAcd,EAAMO,QACpBgB,SAAUA,EACVH,YAAY,EACZH,WAAYQ,EAAUG,IAAI5B,EAAMQ,UAGlC,kBAAC,EAAD,CAAWR,MAAOA,EAAOK,SAAUZ,EAAMoC,UAAWjB,GAAIA,M,iBCvBnDkB,G,OAAS,SAACrC,GAarB,OACE,yBAAKF,UAAU,UACb,kBAAC,IAAD,CAAQwC,IAAI,IAAIC,QATD,WAKjBC,IAAQC,QAAR,eAJc,CACZC,QAAS,kBACTC,IAAK,QAMgCC,KAAK,SAA1C,eAGA,kBAAC,IAAD,CAAQN,IAAI,IAAIC,QAjBF,WAChBC,IAAQC,QAAQ,sBAChBD,IAAQK,KAAK,eAAiB7C,EAAMC,OACpC6C,QAAQC,IAAI/C,EAAMgD,SAcoBvB,KAAK,UAAUmB,KAAK,SAAxD,iBClBOK,EAAQ,SAACjD,GAAsB,IAAD,EACba,mBAAsB,IADT,mBAClCqC,EADkC,KAC1Bd,EAD0B,KAEnCe,EAAY,SAAC5C,GACjB,IAAMyC,EAASE,EACTE,EAAOJ,EAAOI,MAAK,SAACC,GAAD,OAAUA,EAAKlC,KAAOZ,EAAMY,MACrD,GAAIiC,EAAM,CACR,IAAME,EAAwBN,EAAOO,KAAI,SAACF,GACxC,OAAIA,EAAKlC,KAAOiC,EAAKjC,GACZZ,EAEA8C,KAGXjB,EAAUkB,QAEVN,EAAOQ,KAAKjD,GACZ6B,EAAUY,IAGRS,EAAa,SAACC,GAClB,OAAOA,EAAKH,KAAI,SAACF,GACf,OACE,kBAAC,EAAD,CACEf,IAAKe,EAAKlC,GACVZ,MAAO8C,EAAK9C,MACZsB,MAAOwB,EAAKxB,MACZV,GAAIkC,EAAKlC,GACTW,SAAUuB,EAAKvB,SACfM,UAAWe,QAKnB,OACE,6BACE,yBAAKrD,UAAU,aACb,yBAAKA,UAAU,oBAAoB2D,EAAW7B,IAC9C,yBAAK9B,UAAU,oBAAoB2D,EAAW1B,KAEhD,kBAAC,EAAD,CAAQiB,OAAQE,EAAQjD,MAAOD,EAAMC,UC3C9B0D,EAAU,WAAO,IAAD,EACD9C,mBAAS,OADR,mBACpBZ,EADoB,KACbC,EADa,KAE3B,OACE,yBAAKJ,UAAU,WACb,kBAAC,EAAD,CAAQG,MAAOA,EAAOC,SAAUA,IAChC,kBAAC,EAAD,CAAOD,MAAOA,MCKL2D,EAVI,WAAO,IAAD,EACK/C,oBAAS,GADd,mBAChBgD,EADgB,KACRC,EADQ,KAOvB,OALA5C,qBAAU,WACR6C,YAAW,WACTD,GAAU,KACT,OACF,IACI,yBAAKhE,UAAU,OAAO+D,EAAS,kBAAC,EAAD,MAAa,kBAAC,EAAD,QCCjCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMzC,a","file":"static/js/main.43d0475e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PreLoader.css';\r\nexport const Loader = () => {\r\n  return (\r\n    <div className=\"Loader\">\r\n      <h1>App starting...</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport {Button, Radio} from 'antd'\r\nimport './Header.css'\r\ninterface HeaderProp{\r\n    metod: string;\r\n    setMetod: (metod:string)=>void\r\n}\r\nexport const Header = (props:HeaderProp) =>{\r\n    const {metod, setMetod} = props\r\n    return(\r\n        <div className={\"Header\"} >\r\n            <h1>Choos method:</h1>\r\n            <Radio.Group onChange={(e)=>setMetod(e.target.value)} value={metod}>\r\n                <Radio.Button value=\"USB\">USB</Radio.Button>\r\n                <Radio.Button value=\"RS\">RS</Radio.Button>\r\n            </Radio.Group>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './Selecting.css';\r\nimport {Select, Input} from 'antd';\r\nconst {Option} = Select;\r\ninterface SelectingProp {\r\n  setValue: any;\r\n  value: valueProp;\r\n  id?: number;\r\n}\r\nexport interface valueProp {\r\n  measure: number;\r\n  option: number;\r\n}\r\nexport const Selecting = (props: SelectingProp) => {\r\n  const {setValue, value} = props;\r\n  const [valueSelected, setValueSelected] = useState<valueProp>({\r\n    measure: 0,\r\n    option: 1,\r\n  });\r\n  useEffect(() => {\r\n    props.setValue({...valueSelected, id: props.id});\r\n  }, [valueSelected]);\r\n  const selectMeasure = (\r\n    <Select\r\n      defaultValue={valueSelected.option}\r\n      className=\"select-after\"\r\n      onChange={(e) => setValueSelected({...valueSelected, option: e})}\r\n    >\r\n      <Option value={1}>V</Option>\r\n      <Option value={1000}>KV</Option>\r\n      <Option value={1000000}>MV</Option>\r\n    </Select>\r\n  );\r\n  return (\r\n    <Input\r\n      className=\"selectMesure\"\r\n      placeholder={'Select the value'}\r\n      onChange={(e) =>\r\n        setValueSelected({...valueSelected, measure: Number(e.target.value)})\r\n      }\r\n      addonAfter={selectMeasure}\r\n      type=\"number\"\r\n      min={0}\r\n      allowClear={true}\r\n    />\r\n  );\r\n};\r\n","import {FildItem} from './fildItem/FildItem';\r\n\r\nexport const staticFilds: FildItem[] = [\r\n  {\r\n    label: 'Resulting value 1',\r\n    value: {measure: 1, option: 1},\r\n    id: 1,\r\n    disabled: true,\r\n  },\r\n  {\r\n    label: 'Resulting value 2',\r\n    value: {measure: 2, option: 1000},\r\n    id: 2,\r\n    disabled: true,\r\n  },\r\n  {\r\n    label: 'Resulting value 3',\r\n    value: {measure: 3, option: 1000},\r\n    id: 3,\r\n    disabled: true,\r\n  },\r\n  {\r\n    label: 'Resulting value 4',\r\n    value: {measure: 4, option: 1},\r\n    id: 4,\r\n    disabled: true,\r\n  },\r\n  {\r\n    label: 'Resulting value 5',\r\n    value: {measure: 5, option: 1},\r\n    id: 5,\r\n    disabled: true,\r\n  },\r\n];\r\nexport const handleFilds: FildItem[] = [\r\n  {label: 'Set value 1', value: {measure: 1, option: 1}, id: 1},\r\n  {label: 'Set value 2', value: {measure: 2, option: 1000}, id: 2},\r\n  {label: 'Set value 3', value: {measure: 3, option: 1000}, id: 3},\r\n  {label: 'Set value 4', value: {measure: 4, option: 1}, id: 4},\r\n  {label: 'Set value 5', value: {measure: 5, option: 1}, id: 5},\r\n];\r\nexport const optionMap = new Map([\r\n  [1, 'V'],\r\n  [1000, 'KV'],\r\n  [1000000, 'MV'],\r\n]);\r\n","import React from 'react';\r\nimport {Input} from 'antd';\r\nimport './FildItem.css';\r\nimport {Selecting, valueProp} from './select/Selecting';\r\nimport {optionMap} from '../FildsData';\r\nexport interface ValueItem {\r\n  id: number;\r\n  measure: number;\r\n  option: number;\r\n}\r\nexport interface FildItem {\r\n  label: string;\r\n  value: valueProp;\r\n  id?: number;\r\n  disabled?: boolean;\r\n  setValues?: (item: ValueItem) => void;\r\n}\r\n\r\nexport const FildItem = (props: FildItem) => {\r\n  const {label, value, id, disabled} = props;\r\n  return (\r\n    <div className=\"FildItem\">\r\n      <h1>{label}</h1>\r\n      {disabled ? (\r\n        <Input\r\n          defaultValue={value.measure}\r\n          disabled={disabled}\r\n          allowClear={true}\r\n          addonAfter={optionMap.get(value.option)}\r\n        />\r\n      ) : (\r\n        <Selecting value={value} setValue={props.setValues} id={id} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {Button, message} from 'antd';\r\nimport './Footer.css';\r\nimport {ValueItem} from '../Filds/fildItem/FildItem';\r\ninterface FooterProp {\r\n  fields: ValueItem[];\r\n  metod: string;\r\n}\r\nexport const Footer = (props: FooterProp) => {\r\n  const setFields = () => {\r\n    message.success('Fields were update');\r\n    message.info('You use the ' + props.metod);\r\n    console.log(props.fields);\r\n  };\r\n  const pullValues = () => {\r\n    const param = {\r\n      content: 'Already updated',\r\n      top: 200,\r\n    };\r\n    message.success({...param});\r\n  };\r\n  return (\r\n    <div className=\"Footer\">\r\n      <Button key=\"0\" onClick={pullValues} size=\"large\">\r\n        Pull values\r\n      </Button>\r\n      <Button key=\"1\" onClick={setFields} type=\"primary\" size=\"large\">\r\n        Set values\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState} from 'react';\r\nimport './Filds.css';\r\nimport {FildItem, ValueItem} from './fildItem/FildItem';\r\nimport {staticFilds, handleFilds} from './FildsData';\r\nimport {Footer} from '../Footer/Footer';\r\ninterface FildsProp {\r\n  metod: string;\r\n}\r\nexport const Filds = (props: FildsProp) => {\r\n  const [values, setValues] = useState<ValueItem[]>([]);\r\n  const getValues = (value: ValueItem) => {\r\n    const fields = values;\r\n    const find = fields.find((item) => item.id === value.id);\r\n    if (find) {\r\n      const newArray: ValueItem[] = fields.map((item) => {\r\n        if (item.id === find.id) {\r\n          return value;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      setValues(newArray);\r\n    } else {\r\n      fields.push(value);\r\n      setValues(fields);\r\n    }\r\n  };\r\n  const renderList = (list: FildItem[]) => {\r\n    return list.map((item) => {\r\n      return (\r\n        <FildItem\r\n          key={item.id}\r\n          value={item.value}\r\n          label={item.label}\r\n          id={item.id}\r\n          disabled={item.disabled}\r\n          setValues={getValues}\r\n        />\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"FildsList\">\r\n        <div className=\"staticFilds list\">{renderList(staticFilds)}</div>\r\n        <div className=\"handleFilds list\">{renderList(handleFilds)}</div>\r\n      </div>\r\n      <Footer fields={values} metod={props.metod} />\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState, useEffect} from 'react';\r\nimport './Content.css';\r\nimport {Header} from '../components/header/Header';\r\nimport {Filds} from '../components/Filds/Filds';\r\nexport const Content = () => {\r\n  const [metod, setMetod] = useState('USB');\r\n  return (\r\n    <div className=\"content\">\r\n      <Header metod={metod} setMetod={setMetod} />\r\n      <Filds metod={metod} />\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {Loader} from './components/Loader/PreLoader';\nimport {Content} from './content/Content';\nexport const App = () => {\n  const [loaded, setLoaded] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setLoaded(false);\n    }, 2000);\n  }, []);\n  return <div className=\"App\">{loaded ? <Loader /> : <Content />}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}